<?php

/**
 * @file
 * Chef Shared Secret
 * Provides entity for defining Chef shared secrets.
 */


/**
 * The length of the desired string of bytes for a generated shared secret.
 */
define('CHEF_SHARED_SECRET_GENERATE_LENGTH', 512);

/**
 * Implements hook_entity_info().
 */
function chef_shared_secret_entity_info() {
  $return = array();

  $return['chef_shared_secret'] = array(
    'label' => t('Chef shared secret'),
    'entity class' => 'ChefSharedSecret',
    'controller class' => 'ChefSharedSecretController',
    'base table' => 'chef_shared_secret',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'drupal_id',
      'label' => 'name',
      'name' => 'name',
    ),
    'label callback' => 'entity_class_label',
    'access callback' => 'chef_shared_secret_access',
    'module' => 'chef_shared_secret',
    'admin ui' => array(
      'path' => 'admin/structure/chef_shared_secret',
      'file' => 'chef_shared_secret.admin.inc',
      'controller class' => 'ChefSharedSecretUIController',
      'menu wildcard' => '%chef_shared_secret',
    ),
  );

  return $return;
}

/**
 * Access callback for chef_shared_secret entity.
 */
function chef_shared_secret_access($op, $databag = NULL, $account = NULL) {
  return user_access('administer shared secrets', $account);
}

/**
 * Load callback for chef_databag (by name).
 */
function chef_shared_secret_load($name) {
  $entity = entity_load_multiple_by_name('chef_shared_secret', array($name));
  return reset($entity);
}

/**
 * Determines if a shared secret exists.
 */
function chef_shared_secret_exists($name) {
  return (bool) db_query_range('SELECT 1 FROM {chef_shared_secret} WHERE name = :name', 0, 1, array(':name' => $name))->fetchField();
}
